openapi: "3.0.3"
info:
  title: "Pizzeria API"
  description: "Pizzeria API"
  version: "1.0.0"
servers:
- url: "http://localhost:8080"
paths:
  /session/increment:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /api/items:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemDTO"
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ItemCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /api/items/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ItemUpdateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /api/orders:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OrderDTO"
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/OrderCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderDTO"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /api/orders/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "uuid"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "uuid"
        in: "query"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/OrderUpdateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /api/orders/{id}/items:
    get:
      description: ""
      parameters:
      - name: "uuid"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OrderItemDTO"
    post:
      description: ""
      parameters:
      - name: "uuid"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/OrderItemCreateRequest"
        required: true
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderItemDTO"
  /api/test:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /{...}:
    options:
      description: ""
      parameters:
      - name: "..."
        in: "path"
        required: true
        schema:
          type: "string"
components:
  schemas:
    ItemDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        imageUrl:
          type: "string"
        price:
          type: "number"
          format: "float"
        stock:
          type: "integer"
          format: "int32"
    ItemCreateRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        imageUrl:
          type: "string"
        price:
          type: "number"
          format: "float"
        stock:
          type: "integer"
          format: "int32"
    ItemUpdateRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        imageUrl:
          type: "string"
        price:
          type: "number"
          format: "float"
        stock:
          type: "integer"
          format: "int32"
    LocalDateTime:
      type: "object"
      properties: {}
    OrderDTO:
      type: "object"
      properties:
        uuid:
          type: "string"
        purchaseDate:
          $ref: "#/components/schemas/LocalDateTime"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        phone:
          type: "integer"
          format: "int32"
        city:
          type: "string"
        zipCode:
          type: "integer"
          format: "int32"
        firstAddress:
          type: "string"
        secondAddress:
          type: "string"
        totalPrice:
          type: "number"
          format: "float"
        status:
          type: "string"
        userIp:
          type: "string"
        userAgent:
          type: "string"
    OrderCreateRequest:
      type: "object"
      properties:
        purchaseDate:
          $ref: "#/components/schemas/LocalDateTime"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        phone:
          type: "integer"
          format: "int32"
        city:
          type: "string"
        zipCode:
          type: "integer"
          format: "int32"
        firstAddress:
          type: "string"
        secondAddress:
          type: "string"
        totalPrice:
          type: "number"
          format: "float"
        status:
          type: "string"
        userIp:
          type: "string"
        userAgent:
          type: "string"
    OrderUpdateRequest:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        phone:
          type: "integer"
          format: "int32"
        city:
          type: "string"
        zipCode:
          type: "integer"
          format: "int32"
        firstAddress:
          type: "string"
        secondAddress:
          type: "string"
        totalPrice:
          type: "number"
          format: "float"
        status:
          type: "string"
    OrderItemDTO:
      type: "object"
      properties:
        itemId:
          type: "integer"
          format: "int32"
        orderUuid:
          type: "string"
        itemAmount:
          type: "integer"
          format: "int32"
    OrderItemCreateRequest:
      type: "object"
      properties:
        orderItemDTO:
          $ref: "#/components/schemas/OrderItemDTO"